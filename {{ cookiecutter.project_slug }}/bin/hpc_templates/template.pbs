#!/usr/bin/env bash

###### TODO: CHANGE AS NECESSARY #####

#PBS -N JOB_NAME
#PBS -M {{ cookiecutter.hpc_mail_name }}
#PBS -v CONDA_PREFIX,MODULEPATH

### Declare job non-rerunable
#PBS -r n
#PBS -k oed 

### Queue name (qaussian)
#PBS -q stdq1
#PBS -l walltime=196:00:00
#PBS -l nodes=1:ppn=40


##############################  Stuff for PBS  ###########################
PATH=$PBS_O_PATH
cd $PBS_O_WORKDIR

# Define number of processors
NPROCS=$(wc -l < $PBS_NODEFILE)
NNODES=$(uniq $PBS_NODEFILE | wc -l)
NCORES=$((NPROCS / NNODES))

JID="${PBS_JOBID%%.*}"

TODAY="$(date +'%Y-%m-%d')"

get_mem_info() {
  case "${PBS_QUEUE}" in
    stdq1) echo 755 ;; medq1|gpuq1) echo 1000 ;; fatq) echo 3000 ;; 
  esac
}

# cleanup () {
# }

# trap cleanup EXIT


###############################  MY PARAMS  ############################### 

## MODIFY THESE AS NECESSARY

VENV_PREFIX=

NAME=

# main dirs
DATA_DIR=

IN_DIR=
OUT_DIR=


# file paths
INFILE="${IN_DIR}/MY_FILE"


# optional
# MEMORY_GB="$(get_mem_info)"

declare -a CMD_PARAMS=(
)


###############################  DO STUFF  ############################### 

### Load environment and modules

### TODO: CHANGE THIS AS REQUIRED
# module load <MODULE>

[[ -n "${VENV_PREFIX}" && "${VENV_PREFIX}" != "${CONDA_PREFIX}" ]] && \
  conda activate "${VENV_PREFIX}"


### Init

# save this pbs job script to jobs dir
cp "$0" "${PBS_O_WORKDIR}/${PBS_JOBNAME}-${JID}.pbs"


cat <<JOB_PREFACE  >&2
================  Job ID : ${JID}  ================
${NNODES} nodes.
${OMP_NUM_THREADS} threads.
${NPROCS} CPUs allocated:
$(column $PBS_NODEFILE)

This PBS script is running on host $(hostname)
Working directory is ${PBS_O_WORKDIR} 

============== ${PBS_JOBNAME} : ${NPROCS} CPUs ====================
Job Start Time: $(date +'%c')

JOB_PREFACE

### TODO: Change as necessary
cmd="COMMAND 2>&1"  # include this


cat <<CMD_PREFACE 

============== ${PBS_JOBNAME} : Job ID ${JID} ====================

Time is $(date +'%c')

Environment: ${CONDA_PREFIX}

<PROGRAM>:   $(<PROGRAM> --version)
Location:  $(which <PROGRAM>)

INPUT PATHS
-----------
> input dir:  ${IN_DIR}
> input file: $(realpath "${INFILE}")

OUTPUT PATHS
------------
> Output dir:    ${OUT_DIR}

PARAMS
------
$(printf '%s\n' "${CMD_PARAMS[@]}")

COMMAND
-------

${cmd}

CMD_PREFACE

# Checks

##### TODO: CHANGE THESE AS NECESSARY  #####
# [[ -z "$(which <PROGRAM>)" ]] && { 
#   echo "No <PROGRAM> found." >&2 && exit 127 ; }


# for infile in "${<INFILE>}" ; do
#   [[ -f "${infile}" ]] || { echo "ERROR: FILE DOES NOT EXIST: ${infile}" >&2 && exit 1 ; }
# done

# # create out dirs
# for outdir in "${OUT_DIR}" ; do
#   [[ -d "${outdir}" ]] || { echo "Making dir ${outdir}" && mkdir -p "${outdir}" ; }
# done

cat <<EXEC_CMD 
========================================================
EXECUTING COMMAND.....
========================================================

EXEC_CMD

eval "${cmd}"

printf "\nJob Finish Time is %s" "$(date +'%c')" | tee >&2

exit 0


# End of script
 
